# -*- coding: utf-8 -*-
"""ventadatamining.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/16JitLUPZqc27HrH2Pu45k5I_ceSwEwpO

# **Ventas data mining**
"""

print('''Se trata de un conjunto de datos transaccionales que contiene
todas las transacciones ocurridas entre el 01/12/2010y el
09/12/2011 para un comercio minorista en línea sintienda
física registrado y con sede en el Reino Unido.''')
print('_'*78)
print('''información adicional:Se trata de un conjunto de datos transaccionales que
contiene todas las transacciones que se produjeron entre el 1 de diciembre
de 2010 y el 9 de diciembre de 2011 para una empresa minorista en línea sin
establecimientos físicos registrada y con sede en el Reino Unido.La empresa
vende principalmente regalos exclusivos para cualquier ocasión.''')

"""# **Importación de librerias y carga de datos**"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from datetime import datetime

# Cargar los datos
url = 'https://archive.ics.uci.edu/ml/machine-learning-databases/00352/Online%20Retail.xlsx'
data = pd.read_excel(url)
# Ver las primeras filas del DataFrame
print(data.head())

"""# **Limpieza de los datos**"""

# Eliminar filas con valores nulos en columnas críticas
data.dropna(subset=['InvoiceNo', 'Description', 'Quantity', 'UnitPrice'], inplace=True)
# Filtrar solo las transacciones positivas (ventas)
data = data[data['Quantity'] > 0]
# Convertir la columna 'InvoiceDate' a tipo datetime
data['InvoiceDate'] = pd.to_datetime(data['InvoiceDate'])
# Verificar los cambios
print(data.info())

"""# **Preprocesamiento**

1.   Identificar los productos más vendidos
2.   Analizar las tendencias de ventas a lo largo del tiempo
3.   Evaluar el rendimiento por categoría de producto
4.   Identificar patrones de compra por cliente
5.  Conclusiones

# **1.Identificar los productos más vendidos**
"""

# Agrupar por 'Description' y sumar las 'Quantity'
products_sold = data.groupby('Description')['Quantity'].sum().reset_index()

# Ordenar los productos por cantidad vendida
top_products = products_sold.sort_values(by='Quantity', ascending=False).head(20)

# Visualizar los productos más vendidos
plt.figure(figsize=(9, 7))
sns.barplot(x='Quantity', y='Description', data=top_products, color= 'lime')
plt.title('Top 20 Productos Más Vendidos', color= 'darkblue', fontsize=18)
plt.xlabel('Cantidad Vendida',color= 'darkblue', fontsize=15)
plt.ylabel('Descripción del Producto', color= 'darkblue', fontsize=15)
plt.grid(color= 'dimgray')
plt.show()

"""#**2. Analisis de la tendencia de ventas a lo largo del tiempo**"""

# Crear una columna para el año y mes
data['YearMonth'] = data['InvoiceDate'].dt.to_period('M')

# Agrupar por mes y sumar las cantidades vendidas
monthly_sales = data.groupby('YearMonth')['Quantity'].sum().reset_index()

# Convertir YearMonth a datetime para la visualización
monthly_sales['YearMonth'] = monthly_sales['YearMonth'].dt.to_timestamp()

# Visualizar la tendencia de ventas mensuales
plt.xticks(rotation=40)
sns.lineplot(x='YearMonth', y='Quantity', data=monthly_sales)
plt.rcParams['figure.figsize'] = [8, 4]
plt.plot(monthly_sales['YearMonth'], monthly_sales['Quantity'], linestyle='--', marker='o', color= 'lime', alpha=0.9, label='YearMonth')
plt.title('Tendencia de Ventas Mensuales', color= 'black', fontsize=15)
plt.xlabel('Fechas', color= 'darkblue', fontsize=13)
plt.ylabel('Cantidad Vendida', color= 'darkblue', fontsize=13)
plt.grid(color= 'dimgray')
plt.show()

"""# 3."""

